{%- set service_version = interface.major -%}
{%- set service_name = interface.name -%}
{%- set package_fs = interface.package_name.replace('.', '/') -%}
{%- set package_ns = interface.package_name.replace('.', '::') -%}
{%- set type_collections = interface.type_collections -%}
{%- set methods = interface.methods -%}
{%- set broadcasts = interface.broadcasts -%}
{%- set attributes = interface.attributes -%}
{%- set class_name = service_name+'Service' -%}
/**
 * @file {{class_name}}.hpp
 * @date {{date}}
 * @brief It is an auto-generated file.
 * It contains wrappers on receiving requests
 * @copyright Denis Kotov, MIT License. Open source: https://github.com/redradist/Inter-Component-Communication.git
 */

#ifndef _{{class_name.upper()}}_HPP_
#define _{{class_name.upper()}}_HPP_

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <functional>
#include <IComponent.hpp>
#include <v{{service_version}}/{{package_fs}}/{{service_name}}StubDefault.hpp>
{%- if type_collections is not none %}
{%- for type_collection in type_collections %}
#include <v{{service_version}}/{{type_collection.path}}.hpp>
{%- endfor %}
{%- endif %}
#include <commonapi/CommonAPIService.hpp>

namespace icc {

namespace commonapi {

using v{{service_version}}::{{package_ns}}::{{service_name}};
{%- if type_collections is not none %}
{%- for type_collection in type_collections %}
using v{{service_version}}::{{type_collection.type}};
{%- endfor %}
{%- endif %}

template< typename Logger = icc::logger::DummyLogger >
class {{class_name}}
  : public virtual icc::IComponent
  , public icc::commonapi::CommonAPIService< v{{service_version}}::{{package_ns}}::{{service_name}}StubDefault,
                                             Logger > {
 public:
  using icc::commonapi::CommonAPIService< v{{service_version}}::{{package_ns}}::{{service_name}}StubDefault,
                                          Logger >::CommonAPIService;
  using {{service_name}}StubReplies = v{{service_version}}::{{package_ns}}::{{service_name}}Stub;
 public:
  {%- if methods is not none and methods|length > 0 %}
  /***************************************
   * Below methods for receiving requests
   **************************************/
  {%- for method in methods %}
  {%- if method.description is not none %}
  /**{% for description in method.description.splitlines() %}
   * {{description}}
   {% endfor %}*/
  {%- endif %}
  void {{method.name}}(const std::shared_ptr<CommonAPI::ClientId> _client
  {%- if method.inputs is not none and method.inputs|length > 0 -%}
  {{- ", " -}}{%- for input in method.inputs -%}
    {{input.type}} _{{input.name}}{{ ", " if not loop.last }}
  {%- endfor -%}
  {%- endif -%}
  {%- if method.outputs is not none -%}
  {{- ", " -}}{{service_name}}StubReplies::{{method.name}}Reply_t _reply
  {%- endif -%}
  ) override;
  {%- endfor %}
  {% endif %}
 protected:
  {%- if methods is not none and methods|length > 0 %}
  /***************************************
   * Below methods for receiving requests in IComponent thread
   **************************************/
  {%- for method in methods %}
  virtual void request{{method}}(const std::shared_ptr<CommonAPI::ClientId> _client
  {%- if method.inputs is not none and method.inputs|length > 0 -%}
  {{- ", " -}}{%- for input in method.inputs -%}
    {{input.type}} const & _{{input.name}}{{ ", " if not loop.last }}
  {%- endfor -%}
  {%- endif -%}
  {%- if method.outputs is not none -%}
  {{- ", " -}}{{service_name}}StubReplies::{{method.name}}Reply_t _reply) {
  {%- else -%}
  ) {
  {%- endif %}
    // Default implementation.
    // If you need you may override request{{method}}
    // This method will be called in thread of IComponent
    Logger::warning("Default implementation of request{{method}}");
  }
  {%- endfor %}
  {%- endif %}
  {%- if broadcasts is not none and broadcasts|length > 0 %}
  /***************************************
   * Below fire broadcasts for debugging
   **************************************/
  {%- for broadcast in broadcasts %}
  void fire{{broadcast}}Event(
  {%- if broadcast.parameters is not none -%}
  {%- for parameter in broadcast.parameters -%}
  {{parameter.type}} const & _{{parameter.name}}{{ ", " if not loop.last }}
  {%- endfor -%}
  {%- endif -%}
  ) override {
    // Default implementation.
    // Interesting only for debugging purposes
    Logger::debug("fire{{broadcast}}Event is called");
    v{{service_version}}::{{package_ns}}::{{service_name}}StubDefault::fire{{broadcast}}Event(
    {%- if broadcast.parameters is not none -%}
    {%- for parameter in broadcast.parameters -%}
    _{{parameter.name}}{{ ", " if not loop.last }}
    {%- endfor -%}
    {%- endif -%});
  }
  {% endfor %}
  {%- endif %}
  {%- if attributes is not none and attributes|length > 0 %}
  /***************************************
   * Below setters of attributes for debugging
   **************************************/
  {%- for attribute in attributes %}
  void set{{attribute}}Attribute({{attribute.type}} _{{attribute.name}}) override {
    // Default implementation.
    // Interesting only for debugging purposes
    Logger::debug("set{{attribute}}Attribute({{attribute.type}} _{{attribute.name}}) is called");
    v{{service_version}}::{{package_ns}}::{{service_name}}StubDefault::set{{attribute}}Attribute(_{{attribute.name}});
  }
  void set{{attribute}}Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, {{attribute.type}} _{{attribute.name}}) override {
    // Default implementation.
    // Interesting only for debugging
    Logger::debug("set{{attribute}}Attribute(const std::shared_ptr<CommonAPI::ClientId> _client, {{attribute.type}} _{{attribute.name}}) is called");
    v{{service_version}}::{{package_ns}}::{{service_name}}StubDefault::set{{attribute}}Attribute(_client, _{{attribute.name}});
  }
  {% endfor %}
  {%- endif %}
};
{% if methods is not none and methods|length > 0 %}
{%- for method in methods %}
template< typename Logger >
inline
void {{class_name}}< Logger >::{{method.name}}(const std::shared_ptr<CommonAPI::ClientId> _client
{%- if method.inputs is not none and method.inputs|length > 0 %}
{{- ", " -}}{%- for input in method.inputs -%}
    {{input.type}} _{{input.name}}{{ ", " if not loop.last }}
{%- endfor -%}
{%- endif -%}
{%- if method.outputs is not none -%}
{{ ", "}}{{service_name}}StubReplies::{{method.name}}Reply_t _reply
{%- endif -%}
) {
  invoke([=] {
    Logger::debug("request{{method}} is called");
    request{{method}}(_client
    {%- if method.inputs is not none and method.inputs|length > 0 -%}
    {{ ", " }}{%- for input in method.inputs -%}
      _{{input.name}}{{ ", " if not loop.last }}
    {%- endfor -%}
    {%- endif -%}
    {%- if method.outputs is not none %}
    {{- ", " -}} _reply
    {%- endif -%}
    );
  });
}
{% endfor %}
{%- endif %}

}

}

#endif  // _{{class_name.upper()}}_HPP_
